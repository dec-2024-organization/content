STEP 1 - Adding spring security
--------------------------------
1. add the spring security maven dependency to the pom. xml file

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

2. Now all the endpoints are secured. (test the endpoints through browser)
3. So everytime when we try to access an endpoint we have to authenticate ourselves.
4. default user name is "user" and password is present the spring boot console.
5. Next add a java based configuration file
6. Annotate it with @Configuration and @EnableWebSecurity
7. The configure a SecurityFilterChain bean.
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
			http.csrf(csrf-> csrf.disable())
			.authorizeHttpRequests(auth -> auth.anyRequest().permitAll());
		
		return http.build();
	}
8. Now test the endpoints in browser to see that all endpoints are accessible without authentication

STEP 2 - Securing endpoints through custom username password from DB
--------------------------------------------------------------------
1. Create a finder method in UserInfoRepository interface
	Optional<UserInfoEntity> findByUsername(String username);
2. Create a CustomUserDetails class which implements UserDetails
3. Create a CustomUserDetailsService class which implements UserDetailsService
4. Configure UserDetailsService as a Bean in SpringSecurity configuration file.
5. Make sure the passwords in the userinfo_details table is bcrypt encoded
6. Also make sure the fetch type is eager in the ManyToMany mapping of UserInfoEntity
	@ManyToMany(fetch = FetchType.EAGER)
7. Configure the BCryptPasswordEncoder in SecurityConfig file
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
8. Now start the application and test the endpoints through browser

STEP 3 - Role based Authorization using @PreAuthorize() annotation
------------------------------------------------------------------
two ways of configuration
-------------------------
	1. configure in SecurityFilterChain bean in the SecurityConfig
	2. configure using method security ( available from spring boot 3.x onwards)
  1. In SecurityConfig
  --------------------

  2. Using method security - @PreAuthorize()
  ------------------------------------------
	1. To use method security apply the @EnableMethodSecurity annotation above the SecurityConfig file
	2. Now use @PreAuthorize("hasAuthority('USER')") above controller methods wherever required.

STEP 4 - Creating our endpoint to validate username and password using spring security
--------------------------------------------------------------------------------------
1. configure AuthenticationManager bean in SecurityConfig file
	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}

2. configure DaoAuthenticationProvider bean in SecurityConfig file
	@Bean
	public DaoAuthenticationProvider daoAuthenticationProvider() {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setPasswordEncoder(passwordEncoder());
		provider.setUserDetailsService(userDetailsService());
		return provider;
	}

3. create a post endpoint 
    1. in UserInfoController to validate the incomming username password of the request body
    2. use AuthenticationManager to do the authentication

	@PostMapping("/users/validate")
	public ResponseEntity<String> validate(@RequestBody UserInfoEntity userInfo){
		// here validate the userInfo of requestbody using spring security
		Authentication auth = manager.authenticate(new UsernamePasswordAuthenticationToken(userInfo.getUsername(), userInfo.getPassword()));
		if(auth.isAuthenticated()) {
			return new ResponseEntity<String>("Login SUccess!!", HttpStatus.OK);
		}else {
			throw new UsernameNotFoundException("Invalid Credentials!");
		}
	}


STEP 5 - Including JWT token generation with spring security
------------------------------------------------------------
1. Add the jwt maven depencies in pom.xml

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
		</dependency>

2. Create a JwtService class with all JWT related functionalities

@Service
public class JwtService {
	public static final String SECRET = "5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437";

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSignKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    public String generateToken(String userName){
        Map<String,Object> claims=new HashMap<>();
        return createToken(claims,userName);
    }

    private String createToken(Map<String, Object> claims, String userName) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(userName)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis()+1000*60*30))
                .signWith(getSignKey(), SignatureAlgorithm.HS256).compact();
    }

    private Key getSignKey() {
        byte[] keyBytes= Decoders.BASE64.decode(SECRET);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}

3. Generate Jwt token upon successful validation and return the token
4. Test the /api/users/validate endpoint to see if jwt token is generated on successful authentication
5. Create a JwtAuthenticationFilter which will filter the incoming request based on valid token in request header

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtService jwtService;

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String authHeader = request.getHeader("Authorization");
        String token = null;
        String username = null;
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
            username = jwtService.extractUsername(token);
            System.out.println("username : " + username);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(username);
            if (jwtService.validateToken(token, userDetails)) {
            	System.out.println("token validated...");
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response);
    }
}

6. Configure the JwtAuthenticationFilter as a Bean in SecurityConfig and place it before UsernameAuthenticationFilter 

	@Bean
	public JwtAuthenticationFilter jwtAuthenticationFilter() {
		return new JwtAuthenticationFilter();
	} 

	to add the filter ------> .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);

7. Test the secured endpoints by attaching the Bearer token in the Authorization Header

